#!/usr/bin/env node

require("babel-core/register");
require("babel-polyfill");

const EventEmitter = require('events');

class MyEmitter extends EventEmitter { }
const myEmitter = new MyEmitter();
const setting = require('../config/setting');

global.models = {};
global.sequelizeInstance = "";


// var cluster = require('express-cluster');
var path = require('path');

try {
  require('fs').mkdirSync(path.join(__dirname, '../logs'));
} catch (e) {
  if (e.code != 'EEXIST') {
    console.error("Could not set up log directory, error was: ", e);
    process.exit(1);
  }
}


var log4js = require('log4js');
log4js.configure(path.join(__dirname, '../config/log4js.json'));

var log = log4js.getLogger('startup');


myEmitter.on('dbDone', () => {
  var app = require('../app');

  app.set('port', setting.port || 51500);

  var server = app.listen(app.get('port'), function () {
    log.info('adclick server listening on port', server.address().port,
      " with pid ", process.pid);
    console.log('adclick server listening on port', server.address().port,
      " with pid ", process.pid)
  });
   //关闭支付定时任务
  if(setting.cronJobsStatus) {
    const cronJobs = require('../cron');
    cronJobs()
  }
})

const {
  connect
} = require('../util/database');

var Promise = require('bluebird');


Promise.all([connect('AdClickTool')]).then(orms => {
  orms.forEach(orm => {
    Object.assign(models, orm.models);
  })
  myEmitter.emit('dbDone')
})
